) + scale_color_continuous() +
labs(color = "Year")
# Load packages
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
install.packages("ggmap")
install.packages("ggplot2")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
library("dplyr")
library("ggmap")
library("ggplot2")
# Load data from GitHub
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
View(permit_data)
View(samp)
View(permit_data)
View(permit_data)
View(permit_data)
View(permit_data)
View(permit_data)
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "red"))
library(ggplot2)
head(mpg)
library(ggplot2)
qplot(data=mpg, x=cty, y=hwy)
install.packages("httr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("ggrepel")
install.packages("ggmap")
# Yelp API: Where is the best Cuban food in Seattle?
library("httr")
library("jsonlite")
library("dplyr")
library("ggrepel")
library("ggmap")
# Load API key (stored in another file)
source("api_key.R")
# Construct your search query
base_uri <- "https://api.yelp.com/v3/"
endpoint <- "businesses/search"
uri <- paste0(base_uri, endpoint)
# Store a list of query parameters
query_params <- list(
term = "restaurant",
categories = "cuban",
location = "Seattle, WA",
sort_by = "rating",
radius = 8000
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Save the data frame of interest
restaurants <- flatten(response_data$businesses)
# Modify the data frame for analysis and presentation
restaurants <- restaurants %>%
mutate(rank = row_number()) %>%
mutate(name_and_rank = paste0(rank, ". ", name))
# Create a base layer for the map (Google Maps image of Seattle)
base_map <- ggmap(get_map(location = "Seattle, WA", zoom = 11))
# Add labels to the map based on the coordinates in the data
base_map +
geom_label_repel(
data = restaurants,
aes(x = coordinates.longitude, y = coordinates.latitude, label = name_and_rank)
)
View(query_params)
source("api_key.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Klein Wang/Desktop/INFO201/info201A-extra-credit")
if(!require(ggmap)){install.packages("ggmap")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(maptools)){install.packages("maptools")}
if(!require(rgdal)){install.packages("rgdal")}
if(!require(raster)){install.packages("raster")}
if(!require(maps)){install.packages("maps")}
if(!require(RgoogleMaps)){install.packages("RgoogleMaps")}
if(!require(ggplot2)){install.packages("ggplot2")}
if(!require(hrbrthemes)){install.packages("hrbrthemes")}
if(!require(plotly)){install.packages("plotly")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(readr)){install.packages("readr")}
# plot(pressure)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
# Library
library(ggplot2)
ggplot(analyzedData2, aes(x=month,y=totalFires)) +
geom_col()
library(dplyr)
analyzedData <- reportFires[c("state", "month", "number")]
reportFires <- read_csv(file="amazon.csv")
install.packages("tidyverse")
install.packages("tidyverse")
setwd("C:/Users/Klein Wang/Desktop/INFO201/info201A-extra-credit/data")
df <- read.csv("data/amazon.csv", stringAsFactors = F)
df <- read.csv("data/amazon.csv")
setwd("C:/Users/Klein Wang/Desktop/INFO201/info201A-extra-credit")
df <- read.csv("data/amazon.csv")
df <- read.csv("data/amazon.csv", quote = "", stringsAsFactors = FALSE)
View(df)
fire_occurred <- nrow(df)
num_fire_state <- df %>%
group_by(df$X.state.)
num_fire_state <- df %>%
group_by(df$X.state.) %>%
sum(df$X.number.)
num_fire_state <- df %>%
group_by(df$X.state.) %>%
sum(X.number.)
reportFires <- read_csv(file="amazon.csv")
print(reportFires)
options(scipen = 10000)
summary(reportFires)
reportFires <- read_csv(file="amazon.csv")
library(dplyr)
print(df)
options(scipen = 10000)
summary(df)
analyzedData <- reportFires[c("state", "month", "number")]
print(analyzedData)
analyzedData2 <- reportFires %>% select(-date) %>%
group_by(state, month) %>%
summarise(totalFires = sum(number))
print(analyzedData2)
summarisedFires <- analyzedData %>%
mutate(month = factor(month, levels = c("January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"))) %>%
group_by(state, month) %>%
summarise(Frequency = sum(number)) %>%
spread(month, Frequency)
print(summarisedFires)
var <- analyzedData2 %>%
mutate(month = factor(month, levels = c("January", "February","March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))) #%>%
ggplot(var, aes(x=month,y=reorder(state,desc(state)),fill=totalFires)) +
geom_tile() +
scale_fill_gradient(low = "White", high = "red") +
theme(axis.text.x = element_text(angle = 90, vjust=0.25)) +
xlab( "Month" ) +
ylab( "States" ) +
labs(fill="Total Fires")
analyzedData <- reportFires[c("state", "month", "number")]
print(analyzedData)
analyzedData2 <- reportFires %>% select(-date) %>%
group_by(state, month) %>%
summarise(totalFires = sum(number))
print(analyzedData2)
summarisedFires <- analyzedData %>%
mutate(month = factor(month, levels = c("January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"))) %>%
group_by(state, month) %>%
summarise(Frequency = sum(number)) %>%
spread(month, Frequency)
print(summarisedFires)
var <- analyzedData2 %>%
mutate(month = factor(month, levels = c("January", "February","March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))) #%>%
analyzedData <- df[c("state", "month", "number")]
setwd("C:/Users/Klein Wang/Desktop/INFO201/info201A-extra-credit")
df <- read.csv("data/london_merged.csv")
df <- read.csv("data/london_merged.csv")
View(df)
p1 <-
df %>%
group_by(hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, fill = hour)) +
geom_bar(stat = 'identity') +
guides(fill = 'none') +
theme_minimal()
p1
p1 <-
df %>%
group_by(df$hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, fill = hour)) +
geom_bar(stat = 'identity') +
guides(fill = 'none') +
theme_minimal()
p1
df <- read.csv("data/london_merged.csv")
df$season  <- factor(df$season, labels = c("Spring", "Summer", "Fall", "Winter"))
df$hour <- factor(hour(ymd_hms(df$timestamp)))
df$season  <- factor(df$season, labels = c("Spring", "Summer", "Fall", "Winter"))
df$hour <- factor(hour(ymd_hms(df$timestamp)))
library(ggplot2)
library(lubridate)
library(dplyr)
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(ggplot2)
library(lubridate)
library(dplyr)
df <- read.csv("data/london_merged.csv")
df$season  <- factor(df$season, labels = c("Spring", "Summer", "Fall", "Winter"))
df$hour <- factor(hour(ymd_hms(df$timestamp)))
p1 <-
df %>%
group_by(df$hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, fill = hour)) +
geom_bar(stat = 'identity') +
guides(fill = 'none') +
theme_minimal()
p1
View(p1)
library(ggplot2)
library(lubridate)
library(dplyr)
df <- read.csv("data/london_merged.csv")
df$season  <- factor(df$season, labels = c("Spring", "Summer", "Fall", "Winter"))
df$hour <- factor(hour(ymd_hms(df$timestamp)))
first_graph <-
df %>%
group_by(df$hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, fill = hour)) +
geom_bar(stat = 'identity') +
guides(fill = 'none') +
theme_minimal()
View(first_graph)
second_graph <-
df %>%
group_by(season, hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, colour = season)) +
geom_line(aes(group = season)) +
theme_bw() +
geom_point()
View(second_graph)
third_graph <-
df %>%
group_by(season) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = reorder(season, mcount), y = mcount, fill = season)) +
geom_bar(stat = 'identity') +
labs(x = 'senson', y = 'mcount') +
guides(fill = 'none') +
theme_minimal()
View(third_graph)
setwd("C:/Users/Klein Wang/Desktop/INFO201/info201A-extra-credit")
knitr::opts_chunk$set(echo = FALSE)
library(knitr)
source("analysis.R")
third_graph
third_graph
first_graph
second_graph
library(ggplot2)
library(lubridate)
library(dplyr)
df <- read.csv("data/london_merged.csv")
df$season  <- factor(df$season, labels = c("Spring", "Summer", "Fall", "Winter"))
df$hour <- factor(hour(ymd_hms(df$timestamp)))
first_graph  <-
df %>%
group_by(season, hour) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = hour, y = mcount, colour = season)) +
geom_line(aes(group = season)) +
theme_bw() +
geom_point()
View(first_graph)
second_graph <-
df %>%
group_by(season) %>%
summarise(mcount = mean(cnt)) %>%
ggplot(aes(x = reorder(season, mcount), y = mcount, fill = season)) +
geom_bar(stat = 'identity') +
labs(x = 'senson', y = 'mcount') +
guides(fill = 'none') +
theme_minimal()
View(second_graph)
second_graph
first_graph
second_graph
library(knitr)
knitr::opts_chunk$set(echo = FALSE)
source("analysis.R")
library(knitr)
knitr::opts_chunk$set(echo = FALSE)
source("analysis.R")
View(first_graph)
shiny::runApp('C:/Users/Klein Wang/Desktop/INFO201/a7--renhaowang')
library("shiny")
library("plotly")
source("propublica.R")
library("DT")
intro_page <-tabPanel("Introduction of Project",
h1(class = "center", "Overview"),
h3(class = "center", "What is the goal?"),
h4(class = "center_text","The goal of this app is to use Shiny application
to find out informations about our congressional representatives. I use
this shiny app for others to learn more about our congressional
representatives. The user will be able to select representatives
by states, and see more detailed information about them would show on
the same query page. I hope others could find my website useful in
any field."),
h3(class = "center", "Data"),
h4(class = "center_text", "The data set I use for this project is from
propublica Congress API. The link to it is https://www.propublica.org/
datastore/api/propublica-congress-api. I request list of members
in house of representaives, get members' information by State and
Chamber, and get detailed information of each member including their
date of birth."),
h1(class = "center", "Affiliation"),
tags$li(class = "center_text", "Renhao Wang"),
tags$li(class = "center_text", "INFO_201A: Technical Foundations of Informatics"),
tags$li(class = "center_text", "The Information School"),
tags$li(class = "center_text", "University of Washington"),
tags$li(class = "center_text", "Autumn 2019"),
h1("Reflective statement"),
h4(class = "center_text", "I found this assignment is challenging in a lot of
parts. things like the structure of different kinds of functions, the main
structure of ui and server page. I also learned a lot from this project,
and these skill could be really useful if I could use them for future
project. I learned how to solve problems by myself even though the
problem is hard. For most of the time, the website stackoverflow could
be a great instructor for my problems, and also, I send so many emails to
TA and ask him question during my working days, and I found it really
helpful.")
)
table_page <-tabPanel(
"Representative",
titlePanel("State representatives query page"),
sidebarLayout(
sidebarPanel(
id = "sidebar_bar",
selectInput(
inputId = "state_choice",
label = "State",
choices = list_state
),
selectInput(
inputId = "chamber_choice",
label = "Chamber",
choices = c("house", "senate")
),
checkboxGroupInput(
inputId = "show_detail",
label = "Show more detail",
)
),
mainPanel(
id = "main_bar",
br(),
DT::dataTableOutput("table"),
br(),
p("table output")
)
)
)
summary_page <- tabPanel(
"Summary",
titlePanel("Summary Plots"),
sidebarLayout(
sidebarPanel(
id = "sidebar_bar",
selectInput(
inputId = "state",
label = "State",
choice = list_state
)
),
mainPanel(
id = "main_bar",
br(),
h3(class = "center", "State Representatives by Gender"),
plotlyOutput("gender_plot"),
br(),
h3(class = "center", "State Representatives by Political Affliation"),
plotlyOutput("party_plot")
)
)
)
ui <- tagList(
navbarPage(
theme = shinythemes::shinytheme("journal"),
"A7-Access to Congressional Member Information",
intro_page,
table_page,
summary_page
)
)
runApp('C:/Users/Klein Wang/Desktop/INFO201/a7--renhaowang')
runApp('C:/Users/Klein Wang/Desktop/INFO201/a7--renhaowang')
runApp('C:/Users/Klein Wang/Desktop/INFO201/a7--renhaowang')
View(df)
shiny::runApp('C:/Users/Klein Wang/Desktop/INFO201/a7--renhaowang')
